c
draw_award['apuestas']
c
abort
params[:date]
c
draw_award['apuestas']
c
draw_award['apuestas']
draw_award
abort
c
s
skip
skipp
skip
abort
award_details
c
draw_award['apuestas']
c
exist
draw_award['apuestas']
c
draw_award['apuestas']
c
draw_award['apuestas']
c
draw_award['apuestas']
c
draw_award['apuestas']
c
draw_award['apuestas']
c
draw_award['apuestas']
c
draw_award['apuestas']
c
draw_award['apuestas']
c
exist
c
award_details
@bets_awards
award_details
c
draw_award['apuestas'].present?
draw_award['apuestas']
draw_award
c
exist
c
awards
abort
awards.each do |draw_award| puts draw_award['apuestas'].present? end
awards.each do |draw_award| puts draw_award end
awards
 pp params
params
paramms
params[:json]
params
params['json']
params
a
awards.each { |a| puts a |
awards.each { |a| p a |
awards.class
awards,class
awards
awards.is_a?('String')
awards.is_a('String')
awards
pp awards
awards
awards.each do |draw_award|
awards
c
rever_ticket
current_ticket.confirm
current_ticket
add_plays[:data]['0']['confirm']
add_plays[:data]['0']
add_plays[:data]['0'][:confirm]
add_plays[:data]['0']
add_plays[:data]
add_plays[:data][:confirm]
add_plays
c
pp Ticket.columns
Ticket.columns
Ticket.columns.serial
Ticket.columns
Ticket.new
Ticket.column_names
pp add_plays[:data]
add_plays[:data]
add_plays
c
rever_ticket
c
message['message']
message
e
c
JSON.parse(e.message.to_json)['message']
JSON.parse(e.message.to_json)
e.message.to_json
e.message['message']
e.message
JSON.parse(e.message)
e.message
e
e['message']
e.message
e
c
StandardError.message
StandardError
c
request.code
request
c
data[:status]
data[:data]
data
c
balance
balance = IntegratorServices.new(current_player).request_balance
current_player
c
valid_integrator
c
paramsc
params
integrator
c
@options.merge!({ body: USERS["#{@key}_USER".to_sym].to_json })
c
continue
@integrator.users
@integrator
@integrator.users[@key]
@key
@integrator
@options.merge!({ body: @integrator.users[@key].to_json })
c
@key
c
@integrator.users[@key].to_json
 auth_token(@key).present?
find_integrator(integrator)
integrator
c
auth_service.do_login_web_page
auth_service = AuthServices.new(key: "#{@player.currency}", integrator: @player.integrator_id)
@player.integrator_id
@redis.get(token_key(key))
key = "integrator_#{@player.integrator_id}_#{@player.currency}"
@redis = Redis.new
auth_token("integrator_#{@player.integrator_id}_#{@player.currency}")
"integrator_#{@player.integrator_id}_#{@player.currency}"
@player.integrator_id
@player
c
player
c
player
integrator
valid_integrator
c
player
@player
player
@player
player
@player ||= player
player
c
Player.find_by(email: params[:email], integrator_id: params[:integrator_id])
params[:integrator_id]
@player
player
c
player
valid_integrator
c
@player = Player.find_by(email: params[:email], integrator_id: params[:integrator_id])
params
integrator
valid_integrator
player
valid_integrator
c
player
integrator
set_token
@player = Player.find_by(email: params[:email], integrator_id: params[:integrator_id])
Player.find_by(email: params[:email], integrator_id: params[:integrator_id])
c
Figaro.env.backoffice_url
Figaro.env
Figaro.env.production
FIgaro.env.production
c
Figaro.env.backoffice_url
Figaro.env.development
ENV['development']\
ENV['development']
ENV['backoffice_url']
c
Figaro.env.backoffice_url
Figaro.env
Rails.env
ENV['backoffice_url']
Figaro.env.backoffice_url
Figaro.env.production
Figaro.env
c
Figaro.env.backoffice_url
Figaro
ENV['BACKOIFFCE_URL']
c
::Fetch.env('BACKOFFICE_URL')
Fetch.env('BACKOFFICE_URL')
Fetch.env.BACKOFFICE_URL
Figaro.env.BACKOFFICE_URL
Figaro.env
BASE_URL
c
@key
BASE_URL
c
abort
@sorteos ||= JSON.parse(sorteos)
sorteos = redis.get('sorteos')
redis.get('sorteos')sorteos = redis.get('sorteos')
redis.get('sorteos')
abort
current_player
@current_player
c
USERS["#{@key}_USER".to_sym]
USERS["#{@key}_USER".to_sym
c
abort
USERS["#{@key}_USER".to_sym]
USERS["#{@key}_USER"]
"#{@key}_USER"
@key
USERS["#{@key}_USER"]
@key
c
abort
@key
USERS["#{@key}_USER"]
