c
sorteos['0']
sorteos.class
sorteos
current_player
c
set_token
player.present?
player
valid_integrator
c
sorteo_animal['type'] != 'ANIMAL'
sorteo_animal = sorteos.select { |sorteo| sorteo['id'] == lotery_id }&.last
c
abort
sorteo_animal['type'] != 'ANIMAL'
sorteo_animal.blank?
puts sorteo_animal.blank? && sorteo_animal['type'] != 'ANIMAL'
sorteo_animal['type'] != 'ANIMAL'
sorteo_animal.blank?
sorteo_animal = sorteos.select { |sorteo| sorteo['id'] == lotery_id }&.last
sorteo_animal
sorteo_animal.blank?
sorteos.select { |sorteo| sorteo['id'] == lotery_id }&.last
lotery_id
sorteos
c
skip
abort
lotery_id
skip
abort
plays_validates[:data]['0']['aceptados'].blank?
plays_validates[:data]['0']['aceptados'].blank
plays_validates[:data]['0']['aceptados']
plays_validates[:data]['0']
plays_validates[:data]['0']['aceptados'].present?
plays_validates[:data]['0']['aceptados'].count
plays_validates[:data]['0']['aceptados'].length == 0
plays_validates[:data]['0']['aceptados']
plays_validates[:data]['0']
add_plays[:data]['message']
plays_validates[:data]['0']
plays_validates[:data]['0']['msj'].downcase == 'ok'
plays_validates[:data]['0']['msj'].downcase
plays_validates[:data]['0']['msj']
plays_validates[:data]
plays_validates
valid_plays?
add_plays[:data]['message']
add_plays
skip
c
bets.select { |bet| bet['lotery_id'] == lotery_id }.group_by { |bet| bet['amount']}.map {|k,v| "#{k}: #{v.pluck('number').map{|n| get_animalitos(sorteos, 10, n)}.join(', ')}"}.join(" #{10.chr} ")
abort
sorteos.class
sorteos
bets
bets.select { |bet| bet['lotery_id'] == lotery_id }.group_by { |bet| bet['amount']}.map {|k,v| "#{k}: #{v.pluck('number').map{|n| get_animalitos(sorteos, 10, n)}.join(', ')}"}
bets.select { |bet| bet['lotery_id'] == lotery_id }.group_by { |bet| bet['amount']}
bets.select { |bet| bet['lotery_id'] == lotery_id }
bets.select { |bet| bet['lotery_id'] == lotery_id }.group_by { |bet| bet['amount']}.map {|k,v| "#{k}: #{v.pluck('number').map{|n| get_animalitos(sorteos, 10, n)}.join(', ')}"}.join(" #{10.chr} ")
c
redis.
redis
redis.3_sorteos
redis.sorteos
redis
redis = Redis.new
bets.first
bets
skip
c
abort
bets.select { |bet| bet['lotery_id'] == lotery_id}.group_by { |bet| bet['amount']}.map { |k,v| "#{k}: #{v.pluck('number').join(',')}"}.join("#{10.chr}")
bets.select { |bet| bet['lotery_id'] == lotery_id}.group_by { |bet| bet['amount']}.map { |k,v| "#{k}: #{v.pluck('number').join(',')}"}.join('10.chr')
bets.select { |bet| bet['lotery_id'] == lotery_id}.group_by { |bet| bet['amount']}.map { |k,v| "#{k}: #{v.pluck('number').join(',')}"}.join()
bets.select { |bet| bet['lotery_id'] == lotery_id}.group_by { |bet| bet['amount']}.map { |k,v| "#{k}: #{v.pluck('number').join(',')}"}
bets.select { |bet| bet['lotery_id'] == lotery_id}.group_by { |bet| bet['amount']}.map {|k,v| "#{k}: #{v.pluck('number')}"}
bets
bets.select { |bet| bet['lotery_id'] == lotery_id}.group_by { |bet| bet['amount']}.map {|k,v| "#{k}: #{v.pluck('number')}"}
bets.select { |bet| bet['lotery_id'] == lotery_id}.group_by { |bet| bet['amount']}.map {|k,v| "#{k}: #{v.pluck('number')}"}.join('- ')
bets.select { |bet| bet['lotery_id'] == lotery_id}.group_by { |bet| bet['amount']}.map {|k,v| "#{k}: #{v.pluck('number').join('- ')}"}
skip
c
abort
bets.select { |bet| bet['lotery_id'] == lotery_id}
bets
bets.select { |bet| bet['lotery_id'] == lotery_id}.pluck('number','amount')
abort
bets.select { |bet| bet['lotery_id'] == lotery_id}.pluck('number','amount')
bets.select { |bet| bet['lotery_id'] == lotery_id}.pluck('number','amount').join('-')
bets.select { |bet| bet['lotery_id'] == lotery_id}.pluck('number','amount').join('- ')
bets.select { |bet| bet['lotery_id'] == lotery_id}.pluck('number').join('- ')
b = bets.pluck('number','amount').group_by(&:itself).values
bets.pluck('number','amount').group_by(&:itself).values
bets.pluck('number','amount')
bets.pluck('number','amount').join(':')
bets.pluck('number','amount')
bets.pluck('number'.)
bets.pluck('number,amount')
bets.pluck('number')
bets
pp bets
bets
a = bets.select { |bet| bet['lotery_id'] == lotery_id}.pluck('number').join('- ')
bets
lotery_id
c
texto
    texto += "Total: #{add_plays[:data]['0']['total_amount'].to_f.round(2)}" + 10.chr
    texto += "Jugadas: #{add_plays[:data]['0']['cant_bets']}" + 10.chr
    texto += '--------------------------------' + 10.chr
    texto += agroup_bets(add_plays[:data]['0']['bets'])
    texto += '--------------------------------' + 10.chr
    texto += "Fecha/Hora: #{Time.new.strftime('%d/%m/%Y %H:%M')}" + 10.chr
    texto += "Serial/S: #{add_plays[:data]['0']['confirm']}" + 10.chr
    texto += "Ticket: ##{add_plays[:data]['0']['number']}" + 10.chr
    texto += current_player.integrator.dni.present? ? "#{current_player.integrator.dni} #{10.chr}" : "RIF: J-409540634 #{10.chr}" 
texto = ''
texto
    texto += current_player.integrator.dni.present? ? "#{current_player.integrator.dni} #{10.chr}" : "RIF: J-409540634 #{10.chr}" 
current_player.integrator.legal_name.to_s
current_player.integrator.legal_name
    texto += current_player.integrator.legal_name + 10.chr
current_player
c
draw_award['apuestas']
c
abort
params[:date]
c
draw_award['apuestas']
c
draw_award['apuestas']
draw_award
abort
c
s
skip
skipp
skip
abort
award_details
c
draw_award['apuestas']
c
exist
draw_award['apuestas']
c
draw_award['apuestas']
c
draw_award['apuestas']
c
draw_award['apuestas']
c
draw_award['apuestas']
c
draw_award['apuestas']
c
draw_award['apuestas']
c
draw_award['apuestas']
c
draw_award['apuestas']
c
exist
c
award_details
@bets_awards
award_details
c
draw_award['apuestas'].present?
draw_award['apuestas']
draw_award
c
exist
c
awards
abort
awards.each do |draw_award| puts draw_award['apuestas'].present? end
awards.each do |draw_award| puts draw_award end
awards
 pp params
params
paramms
params[:json]
params
params['json']
params
a
awards.each { |a| puts a |
awards.each { |a| p a |
awards.class
awards,class
awards
awards.is_a?('String')
awards.is_a('String')
awards
pp awards
awards
awards.each do |draw_award|
awards
c
rever_ticket
current_ticket.confirm
current_ticket
add_plays[:data]['0']['confirm']
add_plays[:data]['0']
add_plays[:data]['0'][:confirm]
add_plays[:data]['0']
add_plays[:data]
add_plays[:data][:confirm]
add_plays
c
pp Ticket.columns
Ticket.columns
Ticket.columns.serial
Ticket.columns
Ticket.new
Ticket.column_names
pp add_plays[:data]
add_plays[:data]
add_plays
c
rever_ticket
c
message['message']
message
e
c
JSON.parse(e.message.to_json)['message']
JSON.parse(e.message.to_json)
e.message.to_json
e.message['message']
e.message
JSON.parse(e.message)
e.message
e
e['message']
e.message
e
c
StandardError.message
StandardError
c
request.code
request
c
data[:status]
data[:data]
data
c
balance
balance = IntegratorServices.new(current_player).request_balance
current_player
