c
abort
@sorteos ||= JSON.parse(sorteos)
sorteos = redis.get('sorteos')
redis.get('sorteos')sorteos = redis.get('sorteos')
redis.get('sorteos')
abort
current_player
@current_player
c
USERS["#{@key}_USER".to_sym]
USERS["#{@key}_USER".to_sym
c
abort
USERS["#{@key}_USER".to_sym]
USERS["#{@key}_USER"]
"#{@key}_USER"
@key
USERS["#{@key}_USER"]
@key
c
abort
@key
USERS["#{@key}_USER"]
c
abort
@key
USERS
USERS[@key.to_sym]
USERS[@key]
@key
USERS[@key]
USERS
c
@player
abort
@player.present?
@player = Player.find_by(email: params[:email], integrator_id: params[:integrator_id])
@player.present?
Player.find_by(email: params[:email], integrator_id: params[:integrator_id])
abort
token
base_url
params
current_player
current_playe
c
current_player
player
Player.find_by(email: params[:email], integrator_id: params[:integrator_id])
current_playerPlayer.find_by(email: params[:email], integrator_id: params[:integrator_id])
current_player
c
a
a = bets_awards.select{|bet| bet[:ticket_id] == 27}.inject(0) { |sum,hash| sum + hash[:amount].to_f }
a
a = bets_awards.select{|bet| bet[:ticket_id] == 27}
bets_awards.pluck(:ticket_id).uniq
bets_awards.pluck(:ticket_id)
bets_awards
c
"Sorteo: #{sorteo_name(lotery_id)}" + 10.chr
bets_crops.join("#{10.chr}")
bets_crops
c
sorteos
c
@sorteos
c
@sorteos
redis.expireat('sorteos',Time.now.end_of_day.to_i)
V
redis.set('sorteos', @sorteos.to_json)
@sorteos ||= BackofficeServices.new.get_sorteos[:data]['0']
redis.get('sorteos').present?
redis
redis = Redis.new
redis = Redis.enw
redis
redis.get('sorteos').present?
redis.get('sorteos').present?redis.get('sorteos').present?
redis.get('sorteos').present?
reids = Redis.new
redis.get('sorteos').present?
@sorteos
played_draws = bets.pluck('lotery_id').uniq
c
sorteos
@sorteos
sorteos = bets.pluck('lotery_id').uniq
betssorteos = bets.pluck('lotery_id').uniq
bets
c
Ticket.find()
tickets_to_pay
Award.find(reward).award_details.where(status: 'pending_revert')
Award.find(reward).award_details
Award.find(reward)
reward
c
@award.id
@award
c
draw_award['apuestas']
exist_award?(draw_award['sorteo']).present?
c
skip
c
@transaction[:status]
@transaction
c
